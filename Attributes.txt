These tests have attributes set based on their current reliability and things like AWS not enforcing their spec stricly. You can filter tests based on their attributes:

S3TEST_CONF=s3.conf ./virtualenv/bin/nosetests -a '!fails_on_aws'

These are the core function tests:

@attr(method='ACLs')
@attr(method='PUT')
@attr(method='all')
@attr(method='copy')
@attr(method='create')
@attr(method='del')
@attr(method='delete')
@attr(method='get')
@attr(method='head')
@attr(method='multipart')
@attr(method='post')
@attr(method='put')
@attr(method='remove')

@attr(resource='bucket')
@attr(resource='bucket.acl')
@attr(resource='bucket.acls')
@attr(resource='bucket.log')
@attr(resource='object')
@attr(resource='object.acl')
@attr(resource='object.acls')
@attr(resource='object.metadata')

These are secondary function tests:

@attr('bucket-policy')
@attr('encryption')
@attr('fails_on_aws')
@attr('fails_on_dho')
@attr('fails_on_mod_proxy_fcgi')
@attr('fails_on_rgw')
@attr('fails_strict_rfc2616')
@attr('fails_with_subdomain')
@attr('lifecycle')
@attr('multiregion')
@attr('policy')
@attr('tagging')
@attr('versioning')
@attr('100_continue')

These are specific function tests:

@attr(assertion='1MB successful')
@attr(assertion='4MB successful')
@attr(assertion='RequestId appears in the error response')
@attr(assertion='RequestId in the error response matchs the x-amz-request-id in the headers')
@attr(assertion='UTF-8 values passed through')
@attr(assertion='a private object can be set to private')
@attr(assertion='acls read back as empty')
@attr(assertion='adds all grants individually to second user')
@attr(assertion='all permissions are persistent')
@attr(assertion='behaves correctly')
@attr(assertion='bucket is readable')
@attr(assertion='bucket recreation not overriding index')
@attr(assertion='can create access and remove appropriate versions')
@attr(assertion='can create and suspend bucket versioning')
@attr(assertion='can read acl, no other r/w')
@attr(assertion='can read data, no other r/w')
@attr(assertion='can read object')
@attr(assertion='can read/write data/acls')
@attr(assertion='can write acls, no other r/w')
@attr(assertion='can write data, no other r/w')
@attr(assertion='can: read obj, get/set bucket acl, cannot write objs')
@attr(assertion='can\'t access in other region')
@attr(assertion='correct cache control header')
@attr(assertion='correct content length')
@attr(assertion='correct etag')
@attr(assertion='correct expires header')
@attr(assertion='deletes multiple objects with a single call')
@attr(assertion='deletes multiple versions of an object and delete marker with a single call')
@attr(assertion='deletes multiple versions of an object with a single call')
@attr(assertion='distinct buckets have different contents')
@attr(assertion='does not modify other attributes')
@attr(assertion='does not modify owner')
@attr(assertion='dot delimiter characters')
@attr(assertion='empty buckets return no contents')
@attr(assertion='empty conditions return appropriate error response')
@attr(assertion='empty delimiter can be specified')
@attr(assertion='empty prefix returns everything')
@attr(assertion='empty value replaces old')
@attr(assertion='everything works')
@attr(assertion='extended information is getting updated')
@attr(assertion='fail 400')
@attr(assertion='fail 404')
@attr(assertion='fails 304')
@attr(assertion='fails 400')
@attr(assertion='fails 403')
@attr(assertion='fails 404')
@attr(assertion='fails 405')
@attr(assertion='fails 409')
@attr(assertion='fails 412')
@attr(assertion='fails on aws')
@attr(assertion='fails using equality restriction on metadata header')
@attr(assertion='fails w/AttributeError')
@attr(assertion='fails with access key does not exist error')
@attr(assertion='fails with allowable upload size exceeded error')
@attr(assertion='fails with conditions must be list error')
@attr(assertion='fails with expiration must be string error')
@attr(assertion='fails with extra input fields policy error')
@attr(assertion='fails with invalid JSON error')
@attr(assertion='fails with invalid content length error')
@attr(assertion='fails with invalid expiration error')
@attr(assertion='fails with invalid signature error')
@attr(assertion='fails with missing key error')
@attr(assertion='fails with missing signature error')
@attr(assertion='fails with policy condition failed error due to missing field in POST request')
@attr(assertion='fails with policy expired error')
@attr(assertion='fails with policy missing conditions error')
@attr(assertion='fails with policy missing expiration error')
@attr(assertion='fails with subdomain')
@attr(assertion='fails with subdomain: 400')
@attr(assertion='fails with upload size less than minimum allowable error')
@attr(assertion='fails')
@attr(assertion='finds nothing w/unmatched prefix and delimiter')
@attr(assertion='finds nothing w/unmatched prefix')
@attr(assertion='http and ISO-6801 times agree')
@attr(assertion='invalid XML ACL fails 403')
@attr(assertion='invalid max_keys')
@attr(assertion='listing works correctly')
@attr(assertion='marker after list')
@attr(assertion='marker before list')
@attr(assertion='marker not-in-list')
@attr(assertion='name containing dot works')
@attr(assertion='name containing hyphen works')
@attr(assertion='name starts with alphabetic works')
@attr(assertion='name starts with numeric works')
@attr(assertion='new value replaces old')
@attr(assertion='no pagination, empty marker')
@attr(assertion='no pagination, no marker')
@attr(assertion='non-UTF-8 values detected, but preserved')
@attr(assertion='non-printable delimiter can be specified')
@attr(assertion='non-printable prefix can be specified')
@attr(assertion='non-printing marker')
@attr(assertion='non-printing max_keys')
@attr(assertion='non-priting in-fixes noted and preserved')
@attr(assertion='non-priting prefixes noted and preserved')
@attr(assertion='non-priting suffixes noted and preserved')
@attr(assertion='non-slash delimiter characters')
@attr(assertion='non-slash delimiters')
@attr(assertion='nonexistent prefix returns nothing')
@attr(assertion='object contains correct content')
@attr(assertion='operation fails')
@attr(assertion='operation success')
@attr(assertion='operation successfull, no encryption')
@attr(assertion='operations succeed')
@attr(assertion='over-ridden slash ceases to be a delimiter')
@attr(assertion='pagination w/max_keys=0')
@attr(assertion='pagination w/max_keys=1, marker')
@attr(assertion='pagination w/max_keys=2, no marker')
@attr(assertion='pagination w/o max_keys')
@attr(assertion='percentage delimiter characters')
@attr(assertion='prefix and delimiter handling when object ends with delimiter')
@attr(assertion='prefixes in multi-component object names')
@attr(assertion='prefixes starting with underscore')
@attr(assertion='prefixes w/o delimiters')
@attr(assertion='private objects cannot be read, but can be overwritten')
@attr(assertion='public can only list the bucket')
@attr(assertion='public can only read readable object')
@attr(assertion='public can only read the readable object')
@attr(assertion='public can read readable objects and list bucket')
@attr(assertion='public has no access to bucket or objects')
@attr(assertion='read back expected defaults')
@attr(assertion='read back expected values')
@attr(assertion='read back original key contents')
@attr(assertion='read back what we wrote and rewrote')
@attr(assertion='reads back correctly')
@attr(assertion='replaces previous data and metadata')
@attr(assertion='replaces previous metadata')
@attr(assertion='reread what we wrote')
@attr(assertion='return same metadata')
@attr(assertion='returning cors header')
@attr(assertion='returns all expected buckets')
@attr(assertion='returns correct data, 206')
@attr(assertion='returns correct marker version id')
@attr(assertion='returns invalid range, 416')
@attr(assertion='returns only objects directly under prefix')
@attr(assertion='returns only objects under prefix')
@attr(assertion='special names work')
@attr(assertion='succeeds and returns redirect url')
@attr(assertion='succeeds and returns written data')
@attr(assertion='succeeds if object is public-read-write')
@attr(assertion='succeeds using starts-with restriction on metadata header')
@attr(assertion='succeeds with escaped leading $ and returns written data')
@attr(assertion='succeeds with status 201')
@attr(assertion='succeeds with status 204')
@attr(assertion='succeeds')
@attr(assertion='success')
@attr(assertion='successful')
@attr(assertion='suspended versioning behaves correctly')
@attr(assertion='unspecified delimiter defaults to none')
@attr(assertion='unspecified prefix returns everything')
@attr(assertion='unused delimiter is not found')
@attr(assertion='valid XML ACL sets properly')
@attr(assertion='whitespace delimiter characters')
@attr(assertion='works for S3, fails for DHO')
@attr(assertion='works')
@attr(assertion='write empty value, returns empty value')

@attr(operation=' multi-part upload overwrites existing key')
@attr(operation='Do not declare SSE-C but provide key and MD5')
@attr(operation='Do not declare SSE-KMS but provide key_id')
@attr(operation='Test Bucket Policy and ACL')
@attr(operation='Test Bucket Policy for a user belonging to a different tenant')
@attr(operation='Test Bucket Policy on another bucket')
@attr(operation='Test Bucket Policy')
@attr(operation='Test Delete tags')
@attr(operation='Test DeleteObjTagging public')
@attr(operation='Test Get/PutObjTagging output')
@attr(operation='Test GetObjTagging public read')
@attr(operation='Test HEAD obj tagging output')
@attr(operation='Test PUT modifies existing tags')
@attr(operation='Test Put max allowed k-v size')
@attr(operation='Test Put max allowed tags')
@attr(operation='Test PutObj with tagging headers')
@attr(operation='Test PutObjTagging public wrote')
@attr(operation='Test SSE-C encrypted does perform head properly')
@attr(operation='Test SSE-C encrypted transfer 1 byte')
@attr(operation='Test SSE-C encrypted transfer 13 bytes')
@attr(operation='Test SSE-C encrypted transfer 1KB')
@attr(operation='Test SSE-C encrypted transfer 1MB')
@attr(operation='Test SSE-KMS encrypted does perform head properly')
@attr(operation='Test SSE-KMS encrypted transfer 1 byte')
@attr(operation='Test SSE-KMS encrypted transfer 13 bytes')
@attr(operation='Test SSE-KMS encrypted transfer 1KB')
@attr(operation='Test SSE-KMS encrypted transfer 1MB')
@attr(operation='Test exceed key size')
@attr(operation='Test exceed val size')
@attr(operation='Test put condition operator end with ifExists')
@attr(operation='abort multi-part upload')
@attr(operation='acl authenticated-read')
@attr(operation='acl bucket-owner-read')
@attr(operation='acl public-read')
@attr(operation='acl public-read,private')
@attr(operation='acl public-read-write')
@attr(operation='acl set')
@attr(operation='acl: authenticated-read')
@attr(operation='acl: public-read,private')
@attr(operation='acl: public-read-write')
@attr(operation='add acl for nonexistent user')
@attr(operation='add all grants to user through headers')
@attr(operation='add second FULL_CONTROL user')
@attr(operation='anonymous browser based upload via POST request')
@attr(operation='authenticated KMS browser based upload via POST request')
@attr(operation='authenticated browser based upload via POST request')
@attr(operation='authenticated browser based upload via POST request, bad access key')
@attr(operation='authenticated on deleted object and bucket')
@attr(operation='authenticated on deleted object')
@attr(operation='authenticated on private bucket/private object with modified response headers')
@attr(operation='authenticated on private bucket/public object')
@attr(operation='authenticated on public bucket/object')
@attr(operation='authenticated on public bucket/private object')
@attr(operation='authenticated, no object acls')
@attr(operation='begin to overwrite file with multipart upload then abort')
@attr(operation='change acl on an object version changes specific version')
@attr(operation='change acl on an object with no version specified changes latest version')
@attr(operation='check contents of multi-part upload')
@attr(operation='check cors response when origin header set')
@attr(operation='check cors response when origin is set to wildcard')
@attr(operation='check failure on multiple multi-part upload with size too small')
@attr(operation='check multipart copies of versioned objects')
@attr(operation='check multipart copies with single small part')
@attr(operation='check multipart upload without parts')
@attr(operation='check multipart uploads with single small part')
@attr(operation='check x-amz-expires value out of max range')
@attr(operation='check x-amz-expires value out of positive range')
@attr(operation='check x-amz-expires value out of range zero')
@attr(operation='compare w/bucket list when bucket versioning is configured')
@attr(operation='compare w/bucket list')
@attr(operation='complete KMS multi-part upload')
@attr(operation='complete multi-part upload and download with bad key')
@attr(operation='complete multi-part upload')
@attr(operation='complete multiple multi-part upload with different sizes')
@attr(operation='complete object life cycle')
@attr(operation='concurrent creation and removal of objects')
@attr(operation='concurrent creation of objects, concurrent removal')
@attr(operation='concurrent multi-part uploads')
@attr(operation='concurrent set of acls on a bucket')
@attr(operation='copy a non-owned object in a non-owned bucket, but with perms')
@attr(operation='copy from an inaccessible bucket')
@attr(operation='copy from non-existent bucket')
@attr(operation='copy from non-existent object')
@attr(operation='copy object and change acl')
@attr(operation='copy object and replace metadata')
@attr(operation='copy object and retain metadata')
@attr(operation='copy object between regions, verify')
@attr(operation='copy object from different bucket')
@attr(operation='copy object in same bucket')
@attr(operation='copy object to itself')
@attr(operation='copy object to/from versioned bucket')
@attr(operation='copy object with content-type')
@attr(operation='copy zero sized object in same bucket')
@attr(operation='create and list objects with special names')
@attr(operation='create and list objects with underscore as prefix, list using prefix')
@attr(operation='create and remove versioned object and head')
@attr(operation='create and remove versioned object')
@attr(operation='create and remove versions')
@attr(operation='create and test multipart object')
@attr(operation='create and test versioned object copying')
@attr(operation='create bucket with objects and recreate it')
@attr(operation='create bucket')
@attr(operation='create object, then switch to versioning')
@attr(operation='create on one region, access in another')
@attr(operation='create versioned bucket')
@attr(operation='create w/! in name')
@attr(operation='create w/-. in name')
@attr(operation='create w/.- in name')
@attr(operation='create w/.. in name')
@attr(operation='create w/100 byte name')
@attr(operation='create w/250 byte name')
@attr(operation='create w/251 byte name')
@attr(operation='create w/252 byte name')
@attr(operation='create w/253 byte name')
@attr(operation='create w/254 byte name')
@attr(operation='create w/255 byte name')
@attr(operation='create w/dash at end of name')
@attr(operation='create w/ip address for name')
@attr(operation='create w/underscore in name')
@attr(operation='data re-write w/ If-Match: outdated ETag')
@attr(operation='data re-write w/ If-Match: the latest ETag')
@attr(operation='data re-write')
@attr(operation='data write from file (w/100-Continue)')
@attr(operation='declare SSE-C but do not provide key')
@attr(operation='declare SSE-KMS but do not provide key_id')
@attr(operation='default acl')
@attr(operation='delete by non-owner')
@attr(operation='delete multiple objects')
@attr(operation='delete multiple versions')
@attr(operation='deleted bucket')
@attr(operation='deleted object and bucket')
@attr(operation='deleted object')
@attr(operation='empty name')
@attr(operation='excessively long names')
@attr(operation='get lifecycle config')
@attr(operation='get location')
@attr(operation='get w/ If-Match: bogus ETag')
@attr(operation='get w/ If-Match: the latest ETag')
@attr(operation='get w/ If-Modified-Since: after')
@attr(operation='get w/ If-Modified-Since: before')
@attr(operation='get w/ If-None-Match: bogus ETag')
@attr(operation='get w/ If-None-Match: the latest ETag')
@attr(operation='get w/ If-Unmodified-Since: after')
@attr(operation='get w/ If-Unmodified-Since: before')
@attr(operation='head bucket')
@attr(operation='id too long in lifecycle rule')
@attr(operation='invalid status in lifecycle rule')
@attr(operation='list all buckets (anonymous)')
@attr(operation='list all buckets (bad auth)')
@attr(operation='list all buckets')
@attr(operation='list all keys')
@attr(operation='list all objects (anonymous)')
@attr(operation='list under prefix w/delimiter')
@attr(operation='list under prefix')
@attr(operation='list versioned objects')
@attr(operation='list w/251 byte name')
@attr(operation='list')
@attr(operation='metadata re-write')
@attr(operation='metadata write')
@attr(operation='metadata write/re-read')
@attr(operation='metadata write/re-write')
@attr(operation='modification-times')
@attr(operation='modify object metadata by copying')
@attr(operation='multi delete create marker')
@attr(operation='multi-part upload with incorrect ETag')
@attr(operation='multi-part upload with missing part')
@attr(operation='multipart KMS upload with bad key_id for uploading chunks')
@attr(operation='multipart KMS upload with unexistent key_id for chunks')
@attr(operation='multipart check for two writes of the same part, first write finishes last')
@attr(operation='multipart upload with bad key for uploading chunks')
@attr(operation='multipart upload with bad md5 for chunks')
@attr(operation='name begins with underscore')
@attr(operation='non-empty bucket')
@attr(operation='non-existant bucket')
@attr(operation='overwrite existing object w/ If-Match: *')
@attr(operation='overwrite existing object w/ If-None-Match: *')
@attr(operation='overwrite existing object w/ If-None-Match: outdated ETag')
@attr(operation='overwrite existing object w/ If-None-Match: the latest ETag')
@attr(operation='overwrite non-existing object w/ If-Match: *')
@attr(operation='overwrite non-existing object w/ If-None-Match: *')
@attr(operation='public-read acl')
@attr(operation='publically readable bucket')
@attr(operation='range')
@attr(operation='re-create by non-owner')
@attr(operation='re-create')
@attr(operation='read atomicity')
@attr(operation='read bucket extended information')
@attr(operation='read contents that were never written to raise one error response')
@attr(operation='read contents that were never written')
@attr(operation='recreate')
@attr(operation='repeated acl set')
@attr(operation='revoke all ACLs')
@attr(operation='rules conflicted in lifecycle')
@attr(operation='same id')
@attr(operation='set acl FULL_CONTROL (xml)')
@attr(operation='set acl READ (xml)')
@attr(operation='set acl READ_ACP (xml)')
@attr(operation='set acl WRITE (xml)')
@attr(operation='set acl WRITE_ACP (xml)')
@attr(operation='set acl private')
@attr(operation='set acl w/invalid userid')
@attr(operation='set acl w/userid FULL_CONTROL')
@attr(operation='set acl w/userid READ')
@attr(operation='set acl w/userid READ_ACP')
@attr(operation='set acl w/userid WRITE')
@attr(operation='set acl w/userid WRITE_ACP')
@attr(operation='set bucket/object acls: private/private')
@attr(operation='set bucket/object acls: private/public-read')
@attr(operation='set bucket/object acls: private/public-read/write')
@attr(operation='set bucket/object acls: public-read-write/private')
@attr(operation='set bucket/object acls: public-read-write/public-read')
@attr(operation='set bucket/object acls: public-read-write/public-read-write')
@attr(operation='set bucket/object acls: public-read/private')
@attr(operation='set bucket/object acls: public-read/public-read')
@attr(operation='set bucket/object acls: public-read/public-read-write')
@attr(operation='set cors')
@attr(operation='set lifecycle config with delete marker expiration')
@attr(operation='set lifecycle config with expiration date')
@attr(operation='set lifecycle config with multipart expiration')
@attr(operation='set lifecycle config with noncurrent version expiration')
@attr(operation='set lifecycle config with not iso8601 date')
@attr(operation='set lifecycle config')
@attr(operation='set object acls')
@attr(operation='set write-acp')
@attr(operation='set/enable/disable logging target')
@attr(operation='short (one character) name')
@attr(operation='short (two character) name')
@attr(operation='suspend versioned bucket')
@attr(operation='test copy object of a multipart upload')
@attr(operation='test lifecycle delete marker expiration')
@attr(operation='test lifecycle expiration with date')
@attr(operation='test lifecycle expiration')
@attr(operation='test lifecycle multipart expiration')
@attr(operation='test lifecycle non-current version expiration')
@attr(operation='unauthenticated on private bucket')
@attr(operation='unauthenticated on private object')
@attr(operation='unauthenticated, no object acls')
@attr(operation='unauthenticated, publically writable object')
@attr(operation='w/expect continue')
@attr(operation='write atomicity')
@attr(operation='write encrypted with SSE-C and read without SSE-C')
@attr(operation='write encrypted with SSE-C but read with other key')
@attr(operation='write encrypted with SSE-C, but dont provide MD5')
@attr(operation='write encrypted with SSE-C, but md5 is bad')
@attr(operation='write encrypted with SSE-KMS and read without SSE-KMS')
@attr(operation='write encrypted with SSE-KMS but read with other key')
@attr(operation='write file in deleted bucket')
@attr(operation='write key')
@attr(operation='write one or the other')
@attr(operation='write to non-printing key')
@attr(operation='write zero-byte key')
@attr(operation='x-amz-expires check not expired')
